const { spawn } = require('child_process');
const { performance } = require('perf_hooks');

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
 */
const CLUSTER_CONFIG = {
  instances: 5,
  startPort: 3000,
  instances: [
    { port: 3000, name: 'Instance-1' },
    { port: 3001, name: 'Instance-2' },
    { port: 3002, name: 'Instance-3' },
    { port: 3003, name: 'Instance-4' },
    { port: 3004, name: 'Instance-5' }
  ]
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–º
 */
class ClusterManager {
  constructor() {
    this.processes = new Map();
    this.startTime = null;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞
   */
  startInstance(instanceConfig) {
    console.log(`üöÄ Starting ${instanceConfig.name} on port ${instanceConfig.port}...`);
    
    const env = {
      ...process.env,
      PORT: instanceConfig.port.toString(),
      NODE_ENV: 'development',
      INSTANCE_NAME: instanceConfig.name
    };

    const child = spawn('node', ['src/server.js'], {
      env,
      stdio: ['pipe', 'pipe', 'pipe'],
      detached: false
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
    child.stdout.on('data', (data) => {
      const output = data.toString().trim();
      if (output) {
        console.log(`[${instanceConfig.name}] ${output}`);
      }
    });

    child.stderr.on('data', (data) => {
      const error = data.toString().trim();
      if (error) {
        console.error(`[${instanceConfig.name}] ERROR: ${error}`);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    child.on('close', (code) => {
      console.log(`[${instanceConfig.name}] Process exited with code ${code}`);
      this.processes.delete(instanceConfig.port);
      
      if (this.processes.size === 0) {
        console.log('üõë All instances stopped');
        process.exit(0);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    child.on('error', (error) => {
      console.error(`[${instanceConfig.name}] Failed to start:`, error.message);
    });

    this.processes.set(instanceConfig.port, {
      process: child,
      config: instanceConfig,
      startTime: Date.now()
    });

    return child;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
   */
  async startCluster() {
    console.log('üèóÔ∏è  Starting application cluster...');
    console.log(`üìä Configuration: ${CLUSTER_CONFIG.instances.length} instances`);
    console.log(`üåê Ports: ${CLUSTER_CONFIG.instances.map(i => i.port).join(', ')}`);
    
    this.startTime = performance.now();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (let i = 0; i < CLUSTER_CONFIG.instances.length; i++) {
      const instance = CLUSTER_CONFIG.instances[i];
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      if (i > 0) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
      
      this.startInstance(instance);
    }

    console.log('\n‚úÖ Cluster startup initiated');
    console.log('üìã Monitoring instances...\n');

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
    this.startMonitoring();
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
   */
  startMonitoring() {
    const monitorInterval = setInterval(() => {
      const runningInstances = this.processes.size;
      const totalInstances = CLUSTER_CONFIG.instances.length;
      
      console.log(`üìä Cluster Status: ${runningInstances}/${totalInstances} instances running`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∏–Ω—Å—Ç–∞–Ω—Å–µ
      this.processes.forEach((instance, port) => {
        const uptime = Math.floor((Date.now() - instance.startTime) / 1000);
        console.log(`  üü¢ ${instance.config.name} (port ${port}) - uptime: ${uptime}s`);
      });
      
      console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
      
      // –ï—Å–ª–∏ –≤—Å–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      if (runningInstances === 0) {
        clearInterval(monitorInterval);
      }
    }, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => this.stopCluster());
    process.on('SIGTERM', () => this.stopCluster());
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
   */
  async stopCluster() {
    console.log('\nüõë Stopping cluster...');
    
    const stopPromises = Array.from(this.processes.values()).map(instance => {
      return new Promise((resolve) => {
        console.log(`üõë Stopping ${instance.config.name}...`);
        instance.process.kill('SIGTERM');
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        instance.process.on('close', () => {
          console.log(`‚úÖ ${instance.config.name} stopped`);
          resolve();
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          if (!instance.process.killed) {
            instance.process.kill('SIGKILL');
            console.log(`üíÄ ${instance.config.name} force killed`);
            resolve();
          }
        }, 5000);
      });
    });

    await Promise.all(stopPromises);
    
    const duration = (performance.now() - this.startTime) / 1000;
    console.log(`\n‚úÖ Cluster stopped. Total uptime: ${duration.toFixed(2)}s`);
    process.exit(0);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
   */
  getStatus() {
    return {
      totalInstances: CLUSTER_CONFIG.instances.length,
      runningInstances: this.processes.size,
      instances: Array.from(this.processes.values()).map(instance => ({
        name: instance.config.name,
        port: instance.config.port,
        uptime: Math.floor((Date.now() - instance.startTime) / 1000)
      }))
    };
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  const cluster = new ClusterManager();
  
  try {
    await cluster.startCluster();
  } catch (error) {
    console.error('üí• Failed to start cluster:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = ClusterManager; 